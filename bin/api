#!/usr/bin/python
from __future__ import annotations

from azx.info import info

from fastapi import FastAPI
from pydantic import BaseModel
from typing import Text, List, Dict
import yaml
import os
import argparse
import logging
import uvicorn

# azx imports
import azx

class APIConfig(BaseModel):
    host: Text = "0.0.0.0"
    port: int = 8000

    @staticmethod
    def from_file(config_file: Text) -> APIConfig:
        """
        Loads a conf instance from a YAML file
        """
        cfp = os.path.abspath(config_file)
        with open(cfp) as f:
            return APIConfig.from_str(config=f.read())

    @staticmethod
    def from_str(config: Text) -> APIConfig:
        """
        Loads a conf instance based on the contents (str) of a YAML config file
        """
        config_dict = yaml.load(config, Loader=yaml.FullLoader).get("api")
        conf = APIConfig()
        return conf

def main():

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-c", "--config", help="yaml config file")
    args = parser.parse_args()

    conf = APIConfig.from_file(args.config) if args.config else APIConfig()

    server = FastAPI()
    
    # Default Endpoints
    @server.get("/api/version", response_model=Text)
    async def version():
        """
        App version
        """
        return info.version

    @server.get("/api/info")
    async def app_info():
        """
        App info
        """
        return info

    # Run server
    uvicorn.run(server, port=conf.port, host=conf.host)

    raise NotImplementedError

if __name__=="__main__":
    main()
